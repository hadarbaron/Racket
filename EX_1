;Question 1

;<< The function gets a list and checks if there is a word with the suffix "pl",>>
;<< then prints the first word in the list that has that suffix, otherwise it prints false>>
(: ls (Listof String))
(define ls '("yyyt" "TplT" "plTT" "PlPl" ))
(: plSuffixContained : (Listof String) -> (U Boolean String))
(define (plSuffixContained ls)
  (if(null? ls);If the list is empty it means that the function reached the end of the recursion and did not find a word with the suffix "pl" and therefore returns false
    #f
  (let ([a (substring (first ls) (-(string-length (first ls)) 2))]);Placing the suffix of the first word in the list
    (if (equal? a "pl");Check if the first word suffix in the list is "pl"
        (first ls);If equal prints the word
        (plSuffixContained (rest ls))))));Calling back to function with a new list without the first word

(test (plSuffixContained '("pllp" "plyy" "ppp" "lpTT" "lol")) => false)
(test (plSuffixContained '("yyyt" "TplT" "plTT" "PlPl" "plplpl")) => "plplpl")

;Question 2.1

;<< The function accepts a list and returns a string of polynomial equations>>
(: write-poly : (Listof Number) -> String)
(define (write-poly ls )
  (: poly-to-string : Number (Listof Number) String -> String)
  (define (poly-to-string L ls st)
    (cond
     [(null? ls) (if (< (string-length st) 1) "" ;If the list is empty and the string is blank print ""
                     (if (equal? (substring st 0 1) "+") (substring st 1 (string-length st)) st))];If the list is not empty, check if the first character in the string is + ,If so, the + will be dropped
     [else (poly-to-string (- L 1) (rest ls) (string-append st (help (first ls) L)))]));If the list is not empty, call the function again
 (let ([a (list-length ls)]);Test by auxiliary function, the length of the string and so we know what the highest exponent height, which will be the length, less one
 (poly-to-string (- a 1) ls "")))

;<< Auxiliary function: The function checks the length of the list>>
;<< (I took the function written in the presentation of exercise 2)>> 
(: list-length : ( Listof Any ) -> Natural )
( define ( list-length ls )
   (if ( null? ls )
        0
        (+ 1 ( list-length ( rest ls )))))

;<< The function receives two numbers. One represents the exponent >>
;<< and the other represents the coefficient of x and returns a string in the form "ax ^ b" >>
(: help :  Number Number -> String)
(define ( help n i)
(cond [(= 0 i) (if (> n 0); If exponent is equal to 0
                   (string-append "+" (number->string n));If exponent is equal to 0 and the number is positive return string of the form "+n"
                     (number->string n))];If exponent is equal to 0 and the number is negative return string of the form "n"
      [(= 1 i) (if (> n 0)
                   (string-append "+" (number->string n) "x");If exponent is equal to 1 and the number is positive return string of the form "+nx"
                   (string-append (number->string n) "x"))];If exponent is equal to 1 and the number is negative return string of the form "nx"
      [else (if (> n 0)
                (string-append "+" (number->string n) "x^" (number->string i));else if the number is positive return string of the form "+nx^i" 
                (string-append (number->string n) "x^" (number->string i)))]));else if the number is negative return string of the form "nx^i"

;Question 2.1

;<< The function receives a number and a list that represents a polynomial equation>>
;<< and calculates the value of the function at the x point that is obtained>>
(:  compute-poly : Number (Listof Number) -> Number)
(define ( compute-poly x ls)
(: help-compute-poly : Number Number Number (Listof Number) -> Number)
(define (help-compute-poly y x L ls)
  (if
   (null? ls);If the list is empty, return the calculation until now now
   y
   (help-compute-poly (+ y (* (first ls) (paw x L))) x (- L 1) (rest ls))));Otherwise call the function with the value of adding the following part in the polynomial
   (let ([L (list-length ls)])
    (help-compute-poly 0 x (- L 1) ls))) 

;<<Auxiliary function: Exercise the holding operation>>
 (: paw : Number Number -> Number)
(define (paw x p)
  (: help-paw : Number Number Number -> Number)
(define (help-paw y x p)
  (cond
   [(= p 0) 1]
   [(= p 1) y] 
   [else (help-paw (* x y) x (- p 1))]))
  (help-paw x x p))

(test (write-poly '(3 2 6)) => "3x^2+2x+6")
(test (write-poly '()) => "")
(test (write-poly '(7 8 9 10)) => "7x^3+8x^2+9x+10")
(test (write-poly '(-3 2 6)) => "-3x^2+2x+6")
(test (write-poly '(-3 -2 6)) => "-3x^2-2x+6")
(test (write-poly '(7 8 9 -10)) => "7x^3+8x^2+9x-10")
(test (compute-poly 1 '(3 2 6) ) => 11)


;Question 3

(define-type KeyStack
  [EmptyKS]; 3.1 implementaion of the empty Stack.
  [Push Symbol String KeyStack]); 3.2 implementaion of the push operation. 

(: search-stack : Symbol KeyStack -> (U String Boolean)); 3.3. Implement the search operation
( define (search-stack sym kstack)
   (cases kstack
    [(EmptyKS) #f]
    [(Push sy st k)  (if(equal? sy sym) st (search-stack sym k))]))

 (: pop-stack : KeyStack -> (U KeyStack Boolean))
( define (pop-stack KStack)
   (cases KStack
    [(EmptyKS) #f]
    [(Push sy st k) k ]))

(test (EmptyKS) => (EmptyKS))
(test (Push 'b "B" (Push 'a "A" (EmptyKS))) => (Push 'b "B" (Push 'a "A" (EmptyKS))))
(test (Push 'a "AAA" (Push 'b "B" (Push 'a "A" (EmptyKS)))) => (Push 'a "AAA" (Push 'b "B" (Push 'a "A" (EmptyKS)))))
(test (search-stack 'a (Push 'a "AAA" (Push 'b "B" (Push 'a "A" (EmptyKS))))) => "AAA")
(test (search-stack 'c (Push 'a "AAA" (Push 'b "B" (Push 'a "A" (EmptyKS))))) => #f)
(test (pop-stack (Push 'a "AAA" (Push 'b "B" (Push 'a "A" (EmptyKS))))) => (Push 'b "B" (Push 'a "A" (EmptyKS))))
(test (pop-stack (EmptyKS)) => #f)

;Question 4

(: is-odd? : Natural -> Boolean)
;; << A function that checks whether the number received as an input is an odd number >>
;; <<The function uses the is-even? function - The returned value is by the number of calls to the is-even? function >>
;; <<If the number of calls is even, will the function return to is-odd? And the output will be false, otherwise true will come out >>
(define (is-odd? x)
 (if (zero? x)
 false
 (is-even? (- x 1))))

(: is-even? : Natural -> Boolean)
;; << A function that checks whether the number received as an input is an even number >>
;; <<The function uses the is-even? function - The returned value is by the number of calls to the is-odd function? >>
;; <<If the number of calls is even, will the function return to is-even? And the output will be true, otherwise false will come out >>
(define (is-even? x)
 (if (zero? x)
 true
 (is-odd? (- x 1))))

;; tests --- is-odd?/is-even?
(test (not (is-odd? 12)))
(test (is-even? 12))
(test (not (is-odd? 0)))
(test (is-even? 0))
(test (is-odd? 1))
(test (not (is-even? 1)))

(: every? : (All (A) (A -> Boolean) (Listof A) -> Boolean))
;; See explanation about the All syntax at the end of the file...
;; << The function goes over all the organs in the list and checks to see that they are all the same type >>
;; << by recursion that gets the rest of the list every time and all the values that have been the same until now >>
;; << (basically all the organs in the list start from the same reading). In case of inequality of one or more organs to the other organs, >> 
;; << false will be returned, otherwise it will reach the end of readings when the last call is sent a blank list and the value is returned true>>
;; << and all the values that have been the same until now (basically all the organs in the list start from the same reading).
;; << In case of inequality of one or more organs to the other organs,
;; << false will be returned, otherwise it will reach the end of readings when the last call is sent a blank list and the value is returned true>>
(define (every? pred lst)
 (or (null? lst)
 (and (pred (first lst))
 (every? pred (rest lst)))))

;; An example for the usefulness of this polymorphic function
(: all-even? : (Listof Natural) -> Boolean)
;; <<Checker Are all numbers in the list even by calling every? function >>
;; << And sending the list that is received in the current function>>
(define (all-even? lst)
 (every? is-even? lst))

;; tests
(test (all-even? null))
(test (all-even? (list 0)))
(test (all-even? (list 2 4 6 8)))
(test (not (all-even? (list 1 3 5 7))))
(test (not (all-even? (list 1))))
(test (not (all-even? (list 2 4 1 6))))

(: every2? : (All (A B) (A -> Boolean) (B -> Boolean) (Listof A) (Listof B) ->
Boolean))
;; << The function checks whether the two lists that are received have the same type of objects>>
;; << in the same way that the every function only works, which now passes two lists>>
(define (every2? pred1 pred2 lst1 lst2)
 (or (null? lst1) ;; both lists assumed to be of same length
 (and (pred1 (first lst1))
 (pred2 (first lst2))
 (every2? pred1 pred2 (rest lst1) (rest lst2)))))
